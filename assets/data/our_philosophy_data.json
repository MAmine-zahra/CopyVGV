{
  "mainTitle": "Our Philosophy",
  "content": [
    {
      "type": "text",
      "text": "Very Good Ventures has consolidated a wide variety of popular coding practices into a single, opinionated approach we refer to as “Very Good Architecture.”\n\nOur architecture practices have repeatedly enabled us to “ship fast and ship safe,” ensuring we deliver quality software on time, every time.\n\nWe believe a good software architecture is defined by the following qualities:"
    },
    {
      "type": "bulletPoints",
      "points": [
        "\uD83D\uDCAA Consistent: offer strong opinions to complex problems, like state management.",
        "\uD83E\uDDD8\u200D♀\uFE0F Flexible: enable features to be easily refactored or replaced.",
        "\uD83E\uDD13 Approachable: facilitate rapid onboarding and training, even for junior developers.",
        "\uD83E\uDDEA Testable: easy to create automated tests and achieve 100% code coverage.",
        "\uD83C\uDFCE\uFE0F Performant: execute quickly by default.",
        "\uD83D\uDCF1 Multiplatform: build one app that works on every platform."
      ]
    },
    {
      "type": "text",
      "text": "Over the years, we have distilled practices from across the industry that allow us to meet these goals. While there are many ways to achieve the same goals, we are happy to demonstrate at least one way that has been proven to work.\n\n"
    },
    {
      "type": "subtitle",
      "text": "\uD83C\uDFC1 Building for Success\n"
    },
    {
      "type": "text",
      "text": "It’s no secret that software development is expensive, time consuming, and prone to a wide range of challenges that result in the vast majority of software projects failing.\n\nWhile some factors are outside our control as engineers, others are well within our ability to influence. When we make engineering process improvements, we directly increase the odds of positive business outcomes, ensuring the continued success of our business.\n\nTo build complex, enterprise-grade software, we need to find a way to make doing each individual step along the way as easy as possible: i.e., eat our elephant one bite at a time."
    },
    {
      "type": "subtitle",
      "text": "\uD83C\uDF70 Layered Architecture\n"
    },
    {
      "type": "text",
      "text": "For client applications, we follow a variation of layered architecture consisting of 3 main layers: presentation, business logic, and data.\n\nBy clearly differentiating between architectural boundaries, we drastically reduce the amount of knowledge required to contribute to a single layer, as well as improve the code’s readability and reduce the cognitive load required to maintain it. Separating layers allows us to test each piece of code individually (i.e., unit testing).\n\n"
    },
    {
      "type": "subtitle",
      "text": "\uD83E\uDD16 Keep It Simple — for the Humans\n"
    },
    {
      "type": "text",
      "text": "As AI continues to improve at code generation, it is becoming increasingly important to create well-organized code that we — the humans — can understand, verify, and maintain in the event of an outage or other emergency.\n\nTo reduce the likelihood of introducing errors, we want to create the least amount of readable code to perform the work by modeling the problem space correctly. Interestingly enough, “least amount of code,” “readable,” and “correct” are often at odds, forming a pair of bounding constraints for our definition of very good code.\n"
    },
    {
      "type": "image",
      "image": "assets/images/good_code_dark_bg.png"
    },
    {
      "type": "text",
      "text": "Obviously, terms like “descriptive” are fairly subjective and vary between organizations. Historically, this has always required a human to oversee. We don’t see that changing, but we do see AI assisting humans in maintaining code quality.\n\nIn general, we try to leverage:"
    },
    {
      "type": "bulletPoints",
      "points":[
        "✅ Declarative code wherever possible",
        "✅ Thoughtful naming",
        "✅ Object-oriented design patterns",
        "✅ Tests"
      ]
    },
    {
      "type": "subtitle",
      "text": "\uD83D\uDCDC Declarative Programming\n"
    },
    {
      "type": "text",
      "text": "Declarative programming is difficult to define and depends on your frame of reference. We mean this to be “declaring” what the presentation logic or business logic of an application should be, depending on the purpose of the code.\n"
    },
    {
      "type": "code3",
      "declarative": "// declarative coding\n// (saying what it should be)\n\nreturn Visualizer(\n  children: [\n    VisualElement(),\n  ],\n);",
      "imperative": "// imperative coding\n// (saying what should happen)\n\nfinal visualizer = Visualizer();\nfinal text = VisualElement();\nvisualizer.add(text);\n\nreturn visualizer;"
    },
    {
      "type": "text",
      "text": "We’ve found that most code quality-of-life improvements are the result of making code more declarative. After all, it’s usually easier to reason about business logic than it is to reason about business logic and all the implementation details.\n\n"
    },
    {
      "type": "subtitle",
      "text": "\uD83E\uDDE8 Reactive Programming\n"
    },
    {
      "type": "text",
      "text": "We use reactive programming techniques (where necessary) to manipulate streams of data. Reactive programming technically falls under “declarative” programming because of how it describes data transformations.\n\n"
    },
    {
      "type": "code",
      "code": "void main() {\n  // The stream does not run the underlying iterator until we\n  // add a listener.\n  final stream = Stream<int>.fromIterable([1, 2, 3, 4, 5]);\n\n  // 2, 3, 4, 5, 6\n  final mappedStream = stream.map((value) => value + 1);\n\n  mappedStream.listen((value) {\n    print(value);\n  });\n}"
    },
    {
      "type": "caution",
      "caution": "We introduce reactive code cautiously, typically only leveraging it at the repository layer to broadcast data changes to view-specific business logic. While reactive code is technically “declarative”, it describes how the data is transformed, not necessarily the business logic itself: i.e., it should be the underlying plumbing of the business logic.\n\nAdditionally, complex data transformations are known for being difficult to grasp. Because of their tremendous power and flexibility, reactive tools make it easy to accidentally introduce coupling between components in the same architecture layer. In our experience, unintended coupling is by far the most common architectural pain point.\n\nFor this reason, we consider reactive programming to be like glue — it’s extremely strong, but it’s sticky and it gets everywhere if you’re not careful."
    },
    {
      "type": "subtitle",
      "text": "\uD83D\uDCAA Consistency\n"
    },
    {
      "type": "text",
      "text":"We have strong opinions about tests, dependency injection, state management, and organizing business logic. While these opinions are based on our extensive experience, we are also continually striving to document best practices as they evolve over time — which is why this site exists.\n\nBy adopting opinionated solutions, we ensure that each project follows a familiar structure with similar patterns and packages. Consistency reduces the learning curve for developers, enabling them to ramp up in a fraction of the time."
    },
    {
      "type": "subtitle",
      "text": "\uD83E\uDDD8\u200D♀\uFE0F Flexibility\n"
    },
    {
      "type": "text",
      "text":"Businesses rapidly change product requirements to meet demand or remain competitive. Our variation of layered architecture allows us to move quickly while still writing high quality code that’s easy to refactor. By enforcing strong opinions in the codebase, we create code that is highly similar between features, making it easier for a developer to get up to speed and contribute efficiently."
    },
    {
      "type": "subtitle",
      "text": "\uD83E\uDD13 Approachability"
    },
    {
      "type": "text",
      "text": "As always, there are trade-offs to every approach. Our approach to state management requires a certain amount of boilerplate, but we find the additional rigor allows us to easily understand what’s going on, making it easy to refactor quickly.\n\n"
    },
    {
      "type": "subtitle",
      "text": "\uD83C\uDFCE\uFE0F Performance\n"
    },
    {
      "type": "text",
      "text":"Wherever feasible, we leverage technologies that compile down to machine code. When implementing business logic or other core algorithms, we are mindful of algorithmic time complexity, avoiding nested loops and expensive transformations wherever possible.\n\nWe also exercise discretion in selecting third party libraries and frameworks, using our extensive client experience to make informed decisions based on learnings consolidated across dozens of projects.\n\nMost multiplatform projects are best served by building with Google’s cross-platform app development toolchain, Flutter. Flutter is performant, developer friendly, and fully open source — ensuring it is resilient to changes in the industry and supported well into the future."
    }

  ]
}