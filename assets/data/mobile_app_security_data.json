{
  "mainTitle": "Security in Mobile Apps",
  "content": [
    {
      "type": "text",
      "text": "Mobile app security is a critical concern for developers and users alike. The Open Web Application Security Project (OWASP) maintains industry-accepted mobile application security guidelines that should be followed when building multiplatform mobile applications."
    },
    {
      "type": "danger",
      "danger": "By far, the most common security threat is social engineering. Be sure to educate your team and create well-defined trust structures which require face-to-face confirmation for any proposed changes that affect security."
    },
    {
      "type": "subtitle",
      "text": "Common Mobile App Security Threats"
    },
    {
      "type": "text",
      "text": "° Social Engineering: is a manipulation tactic that exploits human error to gain unauthorized access to private information, systems, or valuables. In cybercrime, it involves deceiving users into revealing data, spreading malware, or granting access to restricted systems."
    },
    {
      "type": "text",
      "text": "° Malware: Malicious software intentionally designed to harm, exploit, or compromise a mobile device, its data, or the user. Mobile app malware can take various forms, often disguised as legitimate apps or embedded within apps to deceive users into installing it on their devices."
    },
    {
      "type": "bulletPoints",
      "points": [
        "Trojans",
        "Spyware",
        "Adware",
        "Ransomware",
        "Banking Malware",
        "Keyloggers",
        "Rooting/Jailbreaking kits",
        "Worms",
        "Backdoors"
      ]
    },
    {
      "type": "text",
      "text": "° Phishing: a deceptive attempt by malicious actors to trick users into revealing sensitive information such as login credentials, financial details, or personal data through fraudulent means. Phishing typically relies on social engineering techniques to exploit user trust and manipulate users into taking actions that compromise their security."
    },
    {
      "type": "text",
      "text": "° Man in the middle attacks (MitM): intercepting communication between mobile apps and servers, allowing attackers to eavesdrop or modify data."
    },
    {
      "type": "text",
      "text": "° Data breaches: Unauthorized access leads to the exposure of sensitive user data. Risks include personal information (PII), credentials, and financial data."
    },
    {
      "type": "text",
      "text": "° Authentication attacks: attempts by malicious actors to exploit vulnerabilities in the app’s authentication mechanisms to gain unauthorized access to user accounts, sensitive data, or application functionality. These attacks target flaws in how the app verifies the identity of its users or systems.\n\n"
    },
    {
      "type": "bulletPoints",
      "points": [
        "Credential Stuffing",
        "Brute Force Attacks",
        "Phishing Attacks",
        "Session Hijacking",
        "Man-in-the-Middle Attacks",
        "Password reset Exploits",
        "OAuth and Token-Based Attacks: Attackers exploit vulnerabilities in OAuth flows or misconfigure token handling to gain unauthorized access."
      ]
    },
    {
      "type": "text",
      "text": "° Code tampering: Unauthorized modification of the mobile app’s code, potentially leading to alterations in functionality or the injection of malicious code."
    },
    {
      "type": "text",
      "text": "° Reverse engineering: Extraction of source code or sensitive information from the mobile app, often to create fake versions of the app."
    },
    {
      "type": "text",
      "text": "° Insufficient API Security: Inadequate protection of APIs, leading to vulnerabilities such as unauthorized access, injection attacks, and data exposure."
    },
    {
      "type": "text",
      "text": "° Insecure Data Storage: Weak encryption or improper storage of sensitive data on the device, making it vulnerable to unauthorized access.\n\n"
    },
    {
      "type": "text",
      "text": "° Insufficient Transport Layer Protection: Lack of proper TLS encryption during data transmission, exposing information to interception and manipulation."
    },
    {
      "type": "text",
      "text": "° Denial of Service (DoS) Attacks: Overwhelming a mobile app or API with traffic disrupts its availability, causing service downtime."
    },
    {
      "type": "text",
      "text": "° Unsecured Third-Party Libraries: Integration of insecure or outdated third-party libraries which introduce vulnerabilities into the mobile app."
    },
    {
      "type": "text",
      "text": "Poorly Implemented Multi-Factor Authentication (MFA): Inadequate implementation of MFA, allowing attackers to bypass additional authentication measures."
    },
    {
      "type": "text",
      "text": "Supply Chain Attacks: Compromising the security of a mobile app or API through vulnerabilities in its supply chain, including third-party services or components."
    },
    {
      "type": "subtitle",
      "text": "OWASP Guidelines"
    },
    {
      "type": "text",
      "text": "The Open Worldwide Application Security Project (OWASP) is a globally recognized nonprofit organization dedicated to improving the security of software and web applications. Established in 2001, OWASP provides resources, tools, and best practices to help developers, organizations, and security professionals build secure applications and address vulnerabilities effectively."
    },
    {
      "type": "subtitle",
      "text": "OWASP Mobile Top 10 Security Risks in 2024"
    },
    {
      "type": "text",
      "text": "The OWASP Mobile Top 10 is a list of the most critical security risks for mobile apps and is updated periodically to reflect emerging threats and trends.\n\nThe latest version, OWASP Mobile Top 10 2024, highlights the following risks:"
    },
    {
      "type": "image",
      "image": "assets/images/owasp_security_risks.png"
    },
    {
      "type": "text",
      "text": "Source: OWASP Mobile TOP 10 2024"
    },
    {
      "type": "subtitle",
      "text": "Improper Credential Usage"
    },
    {
      "type": "text",
      "text": "Threat agents can exploit hardcoded credentials or improper credential usage in mobile applications by using automated tools, either publicly available or custom-built."
    },
    {
      "type": "danger",
      "danger": "If your app requires access to sensitive API’s, you must not include those API keys in the front-end of your app.\n\nIt is impossible to secure any credentials that are shipped with an application, since the compiled code for front-end applications is subject to reverse engineering (no matter how clever you think you are).\n\nInstead of shipping sensitive API keys in your app, create a microservice or cloud function which stores the API key securely in your backend (or leverage services like Approov). Yes, it’s extra work — but it’s mandatory for sensitive endpoints."
    },
    {
      "type": "tip",
      "tipPoints": [
        "Use the Android Keystore or iOS Keychain to store sensitive user information.",
        "Use strong encryption and hashing algorithms during credential storage and transmission.",
        "Avoid weak authentication mechanisms, including common/weak passwords or insecure authentication flows."
      ]
    },
    {
      "type": "text",
      "text": "Dart-crypt allows you to salt and hash passwords easily.\n\nFirebase Authentication handles a wide variety of common security considerations and eliminates the need for highly sophisticated authentication for small to mid-size projects.\n\nThere’s also a Flutter-specific guide to Auth0 if you’re leveraging that in your application.\n\nFor more information on Improper Credential Usage, refer to the OWASP guide."
    },
    {
      "type": "subtitle",
      "text": "Inadequate Supply Chain Security"
    },
    {
      "type": "text",
      "text": "Attackers can exploit vulnerabilities in the mobile app supply chain, such as inserting malicious code during development or exploiting flaws in third-party libraries, SDKs, or hardcoded credentials."
    },
    {
      "type": "tip",
      "tipPoints": [
        "Leverage human-led code review (with automated tests, checks and analyzers).",
        "Ensure secure app signing and distribution to block malicious actors. Services like Codemagic can drastically simplify the code-signing process.",
        "Use trusted, validated third-party libraries to minimize risks.",
        "Implement a process that requires both a human and an automated vulnerability checker (such as dependabot) to review package updates and patches in your codebase.",
        "Stay up-to-date on supply chain incidents and open source package vulnerabilities.",
        "Carefully scan pull requests on your open source projects — many open source projects have accidentally merged malicious code by accident."
      ]
    },
    {
      "type": "text",
      "text": "You can check the Software supply chain security for Flutter and its ecosystem video from the Flutter Forward 2023 conference.\n\nThe SLSA (Supply Chain Levels for Software Artifacts) security framework maintains a check-list of standards and controls to prevent supply chain attacks.\n\nFor more information on Inadequate Supply Chain Security, refer to the OWASP guide."
    },
    {
      "type": "subtitle",
      "text": "Insecure Authentication/Authorization"
    },
    {
      "type": "text",
      "text": "Threat agents that exploit authentication and authorization vulnerabilities typically do so through automated attacks that use available or custom-built tools."
    },
    {
      "type": "tip",
      "tipPoints": [
        "Use server-side authentication.",
        "Encrypt local data.",
        "Use device-specific tokens instead of storing passwords or using weak identifiers.",
        "Make persistent authentication opt-in.",
        "Avoid weak PINs for passwords.",
        "Use biometrics (FaceID, TouchID) for secure access to sensitive data.",
        "Perform local integrity checks if offline functionality is necessary."
      ]
    },
    {
      "type": "text",
      "text": "For more on data safety, check out the Encryption and Decryption in Flutter overview.\n\nYou can also use Local Auth to integrate biometric authentication.\n\nFor more information on Insecure Authentication/Authorization, refer to the OWASP guide."
    },
    {
      "type": "subtitle",
      "text": "Insufficient Input/Output Validation"
    },
    {
      "type": "text",
      "text": "Insufficient validation and sanitization of user inputs or network data in mobile apps can lead to critical vulnerabilities, including SQL injection, command injection, and XSS attacks."
    },
    {
      "type": "tip",
      "tipPoints": [
        "Use strict input validation, set length limits, and reject unexpected or malicious input.",
        "Sanitize output to prevent XSS (cross-site scripting).",
        "Use parameterized queries to block SQL injection.",
        "Work with external security vendors which can evaluate and test your application and its servers."
      ]
    },
    {
      "type": "text",
      "text": "Use the Formz package to validate forms in Flutter and prevent incorrect data to be sent to the backend.\n\nFor more information on Insufficient Input/Output Validation, refer to the OWASP guide."
    },
    {
      "type": "subtitle",
      "text": "Insecure Communication"
    },
    {
      "type": "text",
      "text": "Threat agents can intercept or modify insecure communications transferred between an app and the server.\n\nWhen creating an app, assume threats can originate from any of the following:"
    },
    {
      "type": "bulletPoints",
      "points": [
        "Adversaries on the same local network (compromised Wi-Fi).",
        "Unauthorized network devices (malicious routers or proxy servers).",
        "Malware on the mobile device itself."
      ]
    },
    {
      "type": "tip",
      "tipPoints": [
        "Use SSL/TLS for all data transmissions to backend services and third-party entities and avoid mixed SSL sessions.",
        "Only accept certificates signed by trusted certificate authorities (CA’s) and never allow expired or mismatched certificates.",
        "Use current, industry accepted encryption algorithms with appropriate key lengths (AES-128 is a good start). Encryption algorithms are subject to mathematical analysis: some older algorithms have been identified by mathematicians and experts as being easier to exploit.",
        "Pin certificates and require SSL chain verification.",
        "Never transmit sensitive data via unencrypted channels (like SMS or via push notifications).",
        "During security testing, conduct traffic analysis to verify no plaintext data transmissions."
      ]
    },
    {
      "type": "text",
      "text": "If you’re using Firebase, you can implement Firebase App Check to protect your backend from unauthorized clients accessing it.\n\nFor more on certificates, see SSL Certificate Pinning in Flutter.\n\nYou may also use a package called Http Certificate Pinning package to add certificate pinning to your app.\n\nFor more information on Insecure Communication, refer to the OWASP guide."
    },
    {
      "type": "subtitle",
      "text": "Inadequate Privacy Controls"
    },
    {
      "type": "text",
      "text": "Privacy controls are concerned with protecting personally identifiable information (PII), such as names and addresses, credit card information, email and IP addresses, health information, religion, sexuality, and political opinions.\n\nThis information is valuable to attackers for a number of reasons. For example, an attacker could impersonate the victim to commit fraud, misuse the victim’s payment details, blackmail the victim with sensitive information, or harm the victim by destroying or tampering with their critical data."
    },
    {
      "type": "tip",
      "tipPoints": [
        "The best way to prevent privacy violations is to minimize the collection and processing of Personally Identifiable Information (PII). This requires a full understanding of the app’s PII usage.",
        "Evaluate whether all personally identifiable information is necessary, whether less sensitive alternatives can be used, or whether personally identifiable information can be reduced, anonymized, or deleted after a certain period. Allow users to consent to the optional use of personally identifiable information with clear awareness of the associated risks.",
        "Store or transfer PII only when absolutely necessary, with strict authentication and authorization controls. Secure personal data, such as encrypting health information with device TPM keys to protect against sandbox bypasses.",
        "Threat modeling can identify the most likely privacy risks, focusing security efforts accordingly. Use static and dynamic security tools to uncover vulnerabilities like improper logging or accidental data leakage."
      ]
    },
    {
      "type": "subtitle",
      "text": "Insufficient Binary Protection"
    },
    {
      "type": "text",
      "text": "Attackers target app binaries to extract valuable secrets like API keys or cryptographic secrets, access critical business logic or pre-trained AI models, or investigate weaknesses in backend systems. They may also manipulate binaries to access paid features for free, bypass security checks, or insert malicious code. Repackaging attacks can exploit unsuspecting users, such as modifying payment identifiers and redistributing compromised apps to divert payments to attackers. Protecting app binaries is crucial to prevent data theft, fraud, and malicious exploitation."
    },
    {
      "type": "tip",
      "tipPoints": [
        "Apps should only access the minimal information needed to function, as all data in the binary is vulnerable to leaks or manipulation.",
        "Use obfuscation tools to make binaries incomprehensible. Native compilation, interpreters, or nested virtual machines can further complicate reverse engineering Test obfuscation quality using reverse-engineering tools.",
        "Obfuscation makes skipping security checks harder. Reinforce local security checks through backend validation and implement integrity checks to detect code tampering, though attackers may still bypass local checks.",
        "Integrity checks at app launch can detect unauthorized modifications and redistribution. Violations can be reported to remove fake apps from stores, and specialized services are available to support detection and removal efforts."
      ]
    },
    {
      "type": "text",
      "text": "Tools and services such as FreeRASP and Approov can help mitigate the likelihood of a compromised app binary or repackaging attack."
    },
    {
      "type": "bulletPoints",
      "points": ["Approov","FreeRASP"]
    },
    {
      "type": "text",
      "text": "This is a great article that talks about how to secure your API Keys."
    },
    {
      "type": "bulletPoints",
      "points": [
        "Securing API Keys",
        "Obfuscating Dart Code"
      ]
    },
    {
      "type": "caution",
      "caution": "There is no such thing as perfect security against app repackaging attacks. API keys and secrets stored on the client side are always vulnerable to extraction through reverse engineering.\n\nTo protect sensitive API’s, implement a custom-backend which acts as middleware between the app and the sensitive api’s so that the API keys never reach the front-end."
    },
    {
      "type": "subtitle",
      "text": "Security Misconfiguration"
    },
    {
      "type": "text",
      "text": "Security misconfiguration occurs when mobile apps have improperly configured security settings, permissions, or controls, leading to vulnerabilities and unauthorized access. Threat agents, such as attackers with physical device access or malicious apps, exploit these weaknesses to access sensitive data or execute unauthorized actions within the vulnerable app’s context. Proper configuration is crucial to mitigate these risks."
    },
    {
      "type": "tip",
      "tipPoints": [
        "Ensure default settings do not expose sensitive data or unnecessary permissions.",
        "Do not use hardcoded credentials.",
        "Request only necessary permissions for the app’s functionality.",
        "Encrypt app communications and implement certificate pinning.",
        "Turn off debugging features in production apps.",
        "Prevent app data from being included in device backups.",
        "Only export activities, content providers, and services that are required."
      ]
    },
    {
      "type": "caution",
      "caution": "Don’t add permissions that are not necessary for the app to work. It’s easy for an attacker to exploit these permissions to gain access to sensitive data.\n\nIn general, you want to respect the principle of least privilege: only request the permissions that are absolutely necessary for the app to function."
    },
    {
      "type": "subtitle",
      "text": "Insecure Data Storage"
    },
    {
      "type": "text",
      "text": "Insecure data storage in mobile apps exposes sensitive information to various threat agents, including skilled attackers, malicious insiders, state-sponsored actors, cybercriminals, script kiddies, data brokers, competitors, and activists. These agents exploit vulnerabilities like weak encryption, insecure storage, and improper handling of credentials."
    },
    {
      "type": "tip",
      "tipPoints": [
        "Employ robust encryption algorithms to protect data at rest and in transit, such as AES-256.",
        "Use secure communication protocols like HTTPS or SSL/TLS to protect data during transmission.",
        "Store sensitive data generated on-device in secure locations, such as Keychain on iOS or Keystore on Android to prevent unauthorized access.",
        "Use strong authentication, role-based access controls, and validate user permissions to limit access to sensitive data.",
        "Prevent injection attacks by validating and sanitizing user input to ensure only valid data is stored.",
        "Use secure session tokens, set proper session timeouts, and securely store session data.",
        "Keep all libraries and dependencies up to date and apply security patches promptly.",
        "Monitor security advisories and platform updates to address emerging threats and vulnerabilities."
      ]
    },
    {
      "type": "text",
      "text": "If you are using Firestore to store your data, be sure to configure the relevant Firestore security rules for your application."
    },
    {
      "type": "bulletPoints",
      "points": ["Firestore Security Rules"]
    },
    {
      "type": "text",
      "text": "For sensitive data generated on-device, use the secure storage package to store sensitive data in Flutter."
    },
    {
      "type": "bulletPoints",
      "points": ["Secure Storage"]
    },
    {
      "type": "subtitle",
      "text": "Insufficient cryptography"
    },
    {
      "type": "text",
      "text": "Threat agents exploiting insecure cryptography in mobile apps aim to compromise the confidentiality, integrity, and authenticity of sensitive information. They include attackers targeting cryptographic algorithms or implementations to decrypt sensitive data, malicious insiders manipulating processes or exposing encryption keys, state-sponsored actors conducting cryptanalysis for intelligence gathering, cybercriminals exploiting weak encryption for data theft or financial fraud, and attackers leveraging vulnerabilities in cryptographic protocols or libraries. Mitigating these risks requires robust cryptographic practices and secure implementation."
    },
    {
      "type": "tip",
      "tipPoints": [
        "Use strong and widely accepted encryption algorithms such as AES-256, RSA, or ECC, ensuring key lengths adhere to industry standards for strong cryptographic protection.",
        "Follow secure key management practices by storing keys securely in key vaults and making use of hardware security modules for trusted access.",
        "Encryption and decryption processes should utilize established, peer-reviewed libraries to avoid errors associated with custom implementations, as implementing cryptography correctly is incredibly difficult to do and new vulnerabilities are continually identified, even in major projects.",
        "Encryption keys must be securely stored using operating system-provided mechanisms or hardware-based options and should not be stored in plain text.",
        "Use secure transport protocols like HTTPS with proper certificate validation to protect data in transit.",
        "Validate and authenticate the integrity and authenticity of encryption processes using certificates or digital signatures. Regular updates to cryptographic components are essential to mitigate vulnerabilities, supported by security testing such as vulnerability assessments and penetration testing. Follow industry standards and best practices from organizations like NIST and IETF.",
        "Adopt strong hash functions like SHA-256 or bcrypt, apply salting to hashed passwords to defend against precomputed attack tables, and use key derivation functions like PBKDF2 or scrypt to strengthen password-based cryptography and harden your application against brute-force attacks."
      ]
    },
    {
      "type": "text",
      "text": "Check out the following guides for hardening your app’s cryptography:"
    },
    {
      "type": "bulletPoints",
      "points": [
        "Cryptography in Flutter",
        "Unlocking Secure Flutter Apps: A Guide to Building with Dart’s Cryptography",
        "Crypto Package"
      ]
    },
    {
      "type": "subtitle",
      "text": "OWASP MAS Checklist"
    },
    {
      "type": "text",
      "text": "The OWASP Mobile Application Security (MAS) Checklist is a comprehensive guide to securing mobile apps against common security threats. The checklist will provide you with a detailed list of security best practices, including secure coding guidelines, secure data storage, secure communication, and secure authentication mechanisms."
    },
    {
      "type": "subtitle",
      "text": "Other OWASP Resources"
    },
    {
      "type": "bulletPoints",
      "points": [
        "OWASP Mobile Application Security Testing Guide (MASTG)",
        "OWASP Mobile Application Security Verification Standard (MASVS)",
        "OWASP Mobile Application Security Weakness Enumeration (MASWE)"
      ]
    }
  ]
}