{
  "mainTitle": "Backend Architecture",
  "content": [
    {
      "type": "text",
      "text": "Loose coupling, separation of concerns and layered architecture should not only be applied to frontend development. These principles can also be applied during backend development. For example, concepts such as route navigation, data access, data processing and data models can be separated and tested in isolation."
    },
    {
      "type": "note",
      "note": "There are many languages and frameworks to write backends in. It is important to choose tools and follow patterns that serve business needs and maximize developer efficiency. VGV built Dart Frog for this purpose. Dart Frog provides a number of advantages to developers writing Flutter apps:"
    },
    {
      "type": "subtitle",
      "text": "Project Structure"
    },
    {
      "type": "text",
      "text": "Putting the backend in the same repository as the frontend allows developers to easily import data models from the backend. Within the backend directory, developers should consider separating the following elements into dedicated directories:"
    },
    {
      "type": "bulletPoints",
      "points": [
        "Middle Ware Providers",
        "Routes",
        "Data access",
        "Data models",
        "Tests"
      ]
    },
    {
      "type": "text",
      "text": "While providers, routes, and tests, can live in the root backend project, consider putting data models and data access into their own dedicated package(s). Ideally, these layers should be able to exist independently from the rest of the app."
    },
    {
      "type": "folderStructure"
    },
    {
      "type": "subtitle",
      "text": "Models"
    },
    {
      "type": "text",
      "text": "A models package should clearly define the necessary data models that the backend will be sharing with the frontend. Defining endpoint models makes the data necessary to communicate between frontend and backend more explicit. It also creates a data structure that can communicate additional metadata about content received, such as the total count of items and pagination information."
    },
    {
      "type": "code",
      "code": "final class GetTodosResponse {\n  const GetTodosResponse({\n    int count = 0,\n    int pageNumber = 0,\n    List<Todos> todos = const [],\n  });\n  final int count;\n  final int pageNumber;\n  final List<Todos> todos;\n}"
    },
    {
      "type": "note",
      "note": "It is also advisable to automate JSON serialization inside the models package. This can be achieved with the json_serializable package, though experimental macros in Dart offer a potentially cleaner way of doing this in the future."
    },
    {
      "type": "subtitle",
      "text": "Data Access"
    },
    {
      "type": "text",
      "text": "A data source package should allow developers to fetch data from different sources. Similar to the data layer on the frontend, this package should abstract the work of fetching data and providing it to the API routes. This allows for easy development by mocking data in an in-memory source when necessary, or also creating different data sources for different environments."
    },
    {
      "type": "text",
      "text": "The best way to achieve this is by making an abstract data source with the necessary CRUD methods, and implementing this data source as needed based on where the data is coming from."
    },
    {
      "type": "code",
      "code": "abstract class TodosDataSource {\n  Future<Todo> create({\n    required String name,\n  });\n\n  Future<List<Todo>> getAll();\n\n  Future<Todo?> get(String id);\n\n  Future<Todo> update(String id, Todo todo);\n\n  Future<void> delete(String id);\n}"
    },
    {
      "type": "subtitle",
      "text": "Routes"
    },
    {
      "type": "text",
      "text": "Routes should follow common best practices for REST API design"
    },
    {
      "type": "subtitle",
      "text": "Endpoint Should Have Descriptive Paths"
    },
    {
      "type": "text",
      "text": "Endpoints should be named for the collection of objects that they provide access to. Use plural nouns to specify the collection, not the individual entity."
    },
    {
      "type": "code",
      "code": "my_api/v1/todos"
    },
    {
      "type": "text",
      "text": "Nested paths then provide specific data about an individual object within the collection."
    },
    {
      "type": "code",
      "code": "my_api/v1/todos/1"
    },
    {
      "type": "text",
      "text": "When setting up a collection of objects that is nested under another collection, the endpoint path should reflect the relationship."
    },
    {
      "type": "code",
      "code": "my_api/v1/users/123/todos"
    },
    {
      "type": "subtitle",
      "text": "Use Query Parameters to Filter Properties of GET results"
    },
    {
      "type": "text",
      "text": "Query parameters serve as the standard way of filtering the results of a GET request."
    },
    {
      "type": "code",
      "code": "my_api/v1/todos?completed=false"
    },
    {
      "type": "subtitle",
      "text": "Map the Request Body of POST, PUT, and PATCH Requests"
    },
    {
      "type": "text",
      "text": "On requests to the server to create or update items, endpoints should take a stringified JSON body and decode it into a map so that the appropriate entity in the data source is changed. Since this is a common process for all create/update requests, consider adding a utility to map the request body."
    },
    {
      "type": "code",
      "code": "extension RequestBodyDecoder on Request {\n  Future<Map<String, dynamic>> map() async =>\n      Map<String, dynamic>.from(jsonDecode(await body()) as Map);\n}"
    },
    {
      "type": "text",
      "text": "The request body can then be converted into the correct data model like in the endpoint code."
    },
    {
      "type": "code",
      "code": "final body = CreateTodoRequest.fromJson(await context.request.map());"
    },
    {
      "type": "subtitle",
      "text": "Use PATCH to Send Update Requests"
    },
    {
      "type": "text",
      "text": "For update requests, PATCH is more advisable than PUT because PATCH requests the server to update an existing entity, while PUT requests the entity to be replaced."
    },
    {
      "type": "code",
      "code": "PATCH my_api/v1/todos/1"
    },
    {
      "type": "subtitle",
      "text": "DELETE should only require an identifier"
    },
    {
      "type": "text",
      "text": "DELETE requests should require nothing more than an identifier of the object to be deleted. There is no need to send the entire object."
    },
    {
      "type": "code",
      "code": "DELETE my_api/v1/todos/1 //Data source should only require the ID"
    },
    {
      "type": "subtitle",
      "text": "Return Appropriate Status Codes"
    },
    {
      "type": "text",
      "text": "Routes should also return proper status codes to the frontend based on the results of their operations. When an error occurs, sending a useful status and response to the client makes it clear what happened and allows the client to handle errors more smoothly."
    },
    {
      "type": "code",
      "code": "final todo = context.read<TodosDataSource>().get(id);\n\nif (todo == null) {\n  return Response(statusCode: HttpStatus.notFound, body: 'No todo exists with the given $id');\n}"
    },
    {
      "type": "text",
      "text": " "
    },
    {
      "type": "code",
      "code": "late final requestBody;\ntry {\n  requestBody = CreateTodoRequest.fromJson(jsonDecode(await context.request.body() as Map));\n} catch (e) {\n  return Response(statusCode: HttpStatus.badRequest, body: 'Invalid request: $e');\n}"
    },
    {
      "type": "text",
      "text": " "
    },
    {
      "type": "code",
      "code": "try {\n  await someServerSideProcess();\n} catch (e) {\n  return Response(statusCode: HttpStatus.internalServerError, body: 'Server error: $e');\n}"
    }
  ]
}